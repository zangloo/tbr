name: Binary

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: 'v1.0.0'

jobs:
  build-win:
    runs-on: windows-latest
    env:
      PKG_CONFIG_PATH: 'C:\gnome\lib\pkgconfig'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        id: cache
        with:
          path: c:/gnome
          key: ${{ runner.os }}-gtk4-14.2
          restore-keys: |
            ${{ runner.os }}-gtk4-14.2

      - name: Set up the PATH environment
        run: |
          echo "C:\pkg-config-lite-0.28-1\bin" >> $GITHUB_PATH
          echo "C:\gnome\bin" >> $GITHUB_PATH
        shell: bash

      - name: Install pkgconfig-lite
        run: |
          Invoke-WebRequest -SslProtocol Tls12 -Uri https://deac-fra.dl.sourceforge.net/project/pkgconfiglite/0.28-1/pkg-config-lite-0.28-1_bin-win32.zip -OutFile /pkg_config_lite.zip -MaximumRetryCount 5
          Expand-Archive /pkg_config_lite.zip -DestinationPath C:\
          ls C:\
          ls C:\pkg-config-lite-0.28-1
          ls C:\pkg-config-lite-0.28-1\bin
          pkg-config --version

      - name: Clone GTK
        working-directory: /
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git clone https://gitlab.gnome.org/GNOME/gtk.git --depth 1

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install Python Dependencies
        run: pip install meson ninja setuptools packaging

      - name: Setup MSVC
        uses: bus1/cabuild/action/msdevshell@v1
        with:
          architecture: x64

      - name: Prepare GTK build
        working-directory: /gtk
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          meson setup builddir --prefix=C:/gnome -Dbackend_max_links=1 -Dbuild-demos=false -Dbuild-tests=false -Dvulkan=disabled -Dmedia-gstreamer=disabled -Dbuild-examples=false -Dglib:tests=false -Dharfbuzz:tests=disabled -Dharfbuzz:docs=disabled -Dgraphene:tests=false -Dgdk-pixbuf:tests=false -Dcairo:tests=disabled

      - name: Build and install GTK
        working-directory: /gtk
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          meson install -C builddir

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features v4_12

      - name: Get version
        id: version
        shell: bash
        run: |
          if [ "${{ github.event.inputs.version }}" == "" ]; then
            echo "ver=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
            echo "name=tbr-windows-amd64-${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "ver=${{ github.event.inputs.version }}" >> "$GITHUB_OUTPUT"
            echo "name=tbr-windows-amd64-${{ github.event.inputs.version }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Copy
        run: |
          mkdir "${{ steps.version.outputs.name }}"
          cp target/release/tbr.exe "${{ steps.version.outputs.name }}"
          cp -r c:/gnome/bin/*.dll "${{ steps.version.outputs.name }}"

      - name: Zip
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          filename: "${{ steps.version.outputs.name }}.zip"
          path: "${{ steps.version.outputs.name }}"

      - name: Release bundle
        uses: ncipollo/release-action@v1.12.0
        with:
          tag: "${{ steps.version.outputs.ver }}"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "${{ steps.version.outputs.name }}.zip"

#      - name: Release
#        uses: softprops/action-gh-release@v1
#        with:
#          tag_name: "${{ steps.version.outputs.ver }}"
#          files: target/release/tbr.exe
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
